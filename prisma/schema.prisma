// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
}

enum Role {
  user
  admin
}

enum OrderStatus {
  fullfilled
  shipped
  awaiting_shipment
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  gender        Gender?
  username      String?
  address       String?
  dateOfBrith   String?
  phoneNumber   String?
  aboutYou      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(user)
  accounts      Account[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  reviews   reviews[]
  Booking   Booking[]
  Order     Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Rooms {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  desc           String
  stayInfo       String
  featuredImage  String
  galleryImages  String[]
  price          Float
  bedrooms       Int
  baths          Int
  guests         Int
  sizeInMeter    Float
  saleOff        String
  reviews        Float
  RoomCategory   RoomCategory @relation(fields: [roomCategoryId], references: [id])
  roomCategoryId String       @db.ObjectId
  review         reviews[]
  Booking        Booking[]
  Order          Order[]
}

model RoomCategory {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  Room Rooms[]
}

model reviews {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  comment     String
  approved    Boolean  @default(false)
  ratingCount Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Rooms       Rooms    @relation(fields: [roomsId], references: [id])
  roomsId     String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model Booking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guests      Int
  nights      Int
  checking    String
  checkout    String
  price       Float
  bookingCode String
  room        Rooms    @relation(fields: [roomsId], references: [id])
  roomsId     String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  isPaid    Boolean     @default(false)
  satatus   OrderStatus @default(awaiting_shipment)
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @db.ObjectId
  Rooms     Rooms       @relation(fields: [roomsId], references: [id])
  roomsId   String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
